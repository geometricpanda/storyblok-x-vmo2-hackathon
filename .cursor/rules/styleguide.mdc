---
description: 
globs: 
alwaysApply: true
---
# Styleguide

## Packages Management

Use yarn for package management.

## React Components & NextJS

All React components should be typed using the `FC` type, imported from `react`.
If a component has properties, they should be provided via a dedicated interface.

This application is configured with the NextJS App Router using a Src Folder

Within a NextJS Layout.tsx, Template.tsx or Page.tsx component, the export should follow the component delaration.

The default component within a Page.tsx file should be named Page.
The default component within a Layout.tsx file should be named Layout.
The default component within a Template.tsx file should be named Template.

Reusable components such as buttons or inputs should be located within `./src/components/<component-name>/index.tsx`.

Only components required by NextJS to be the default export should be exported as default, the rest should be named exports.

Components unique to a single Page, should be colocated next to the Page.tsx and kept within a `_components` folder.

All Layout.tsx and Page.tsx components should be Server Components.
Interactivity should be provided by Client components, proxying API calls through Server Actions.

Server actions should be colocated and live in a `_actions` folders.
Forms should be built using React Hook Form, and Validated using Zod.

Where a type is imported, and used as a type only, it should be imported as a type.

### Server Action Conventions

- **Data Validation:** The first step in any server action that receives data from a form should be to re-validate that data against its Zod schema. This is a critical security measure.
- **Data Passing:** Server actions should be designed to accept strongly-typed objects (e.g., the Zod schema type) rather than raw `FormData`. This improves type safety and testability.

### UI Component Conventions

- **Alerts:** Reusable `Alert` components should support a `title` prop to provide a clear summary of the content.
- **Icons:** Use the `lucide-react` library for a consistent icon set. Error icons across the application should be consistent (e.g., using `AlertTriangle`). Icons within alerts should have a solid fill for better visibility (e.g., using the `fill-current` Tailwind class).
- **Form Field Errors:** Error messages for form inputs should be displayed vertically below the input field, not horizontally beside it. This is typically achieved by using `flex` or `block` display properties for the error container.

## CSS & Tailwind

CSS should be implemented using CSS modules.
Tailwind is preferred over custom CSS, we are using Tailwind 4 with Daisy UI
You can find out more about DaisyUI by using the Context 7 MCP.

When using a CSS module, you must use the bracket notation i.e. `styles['classname-1']`.

For components with a single CSS classes, it should be provided directly into the `className` property of the HTML element it's being applied to.

For components with multiple css classes, they should be applied using the CLSX library and ensure that each classname is a different string - this is to allow multiline wrapping:

```tsx
<div className={clsx('classname-1', 'classname-2')}>
  ...
</div>
```

Should a component have optional CSS classes, they should be applied using an object notication

```tsx
<div
  className={clsx(
    {
      [styles['classname']]: true,
      [styles['classname--variant']]: variant === true,
    },
    className,
  )}
></div>
```

## React Hook Form

- **Submission Handling:** The `onSubmit` function should be wrapped with `handleSubmit` at the time of its declaration, not in the `<form>` element's prop. This provides better type safety and cleaner JSX.

  ```tsx
  const { handleSubmit } = useForm<MyFormSchema>();

  const onSubmit = handleSubmit(async (data) => {
    // submission logic
  });

  return <form onSubmit={onSubmit}>{/* ... */}</form>;
  ```

- **Pending/Submitting State:** Use the `isSubmitting` property from `formState` to manage the submitting state of a form. Avoid using a separate `useState` for this purpose.

- **Error Handling:** Use a unified approach for displaying errors. All errors, whether from client-side validation or returned from a server action, should be managed by `react-hook-form`.
  - Use the `setError` function to programmatically set errors.
  - For general, non-field-specific errors returned from a server action, set the error on the `root` of the form (e.g., `setError('root.serverError', { ... })`).
